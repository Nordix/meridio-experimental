// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/target/types/trench.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	nsp "github.com/nordix/meridio/api/nsp"
	types "github.com/nordix/meridio/pkg/target/types"
)

// MockTrench is a mock of Trench interface.
type MockTrench struct {
	ctrl     *gomock.Controller
	recorder *MockTrenchMockRecorder
}

// MockTrenchMockRecorder is the mock recorder for MockTrench.
type MockTrenchMockRecorder struct {
	mock *MockTrench
}

// NewMockTrench creates a new mock instance.
func NewMockTrench(ctrl *gomock.Controller) *MockTrench {
	mock := &MockTrench{ctrl: ctrl}
	mock.recorder = &MockTrenchMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrench) EXPECT() *MockTrenchMockRecorder {
	return m.recorder
}

// AddConduit mocks base method.
func (m *MockTrench) AddConduit(arg0 context.Context, arg1 types.Conduit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddConduit", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddConduit indicates an expected call of AddConduit.
func (mr *MockTrenchMockRecorder) AddConduit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddConduit", reflect.TypeOf((*MockTrench)(nil).AddConduit), arg0, arg1)
}

// Delete mocks base method.
func (m *MockTrench) Delete(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTrenchMockRecorder) Delete(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTrench)(nil).Delete), ctx)
}

// GetConduit mocks base method.
func (m *MockTrench) GetConduit(conduitName string) types.Conduit {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConduit", conduitName)
	ret0, _ := ret[0].(types.Conduit)
	return ret0
}

// GetConduit indicates an expected call of GetConduit.
func (mr *MockTrenchMockRecorder) GetConduit(conduitName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConduit", reflect.TypeOf((*MockTrench)(nil).GetConduit), conduitName)
}

// GetConduits mocks base method.
func (m *MockTrench) GetConduits() []types.Conduit {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConduits")
	ret0, _ := ret[0].([]types.Conduit)
	return ret0
}

// GetConduits indicates an expected call of GetConduits.
func (mr *MockTrenchMockRecorder) GetConduits() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConduits", reflect.TypeOf((*MockTrench)(nil).GetConduits))
}

// GetNSPClient mocks base method.
func (m *MockTrench) GetNSPClient() nsp.NetworkServicePlateformServiceClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNSPClient")
	ret0, _ := ret[0].(nsp.NetworkServicePlateformServiceClient)
	return ret0
}

// GetNSPClient indicates an expected call of GetNSPClient.
func (mr *MockTrenchMockRecorder) GetNSPClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNSPClient", reflect.TypeOf((*MockTrench)(nil).GetNSPClient))
}

// GetName mocks base method.
func (m *MockTrench) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockTrenchMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockTrench)(nil).GetName))
}

// GetNamespace mocks base method.
func (m *MockTrench) GetNamespace() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespace")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNamespace indicates an expected call of GetNamespace.
func (mr *MockTrenchMockRecorder) GetNamespace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespace", reflect.TypeOf((*MockTrench)(nil).GetNamespace))
}

// RemoveConduit mocks base method.
func (m *MockTrench) RemoveConduit(arg0 context.Context, arg1 types.Conduit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveConduit", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveConduit indicates an expected call of RemoveConduit.
func (mr *MockTrenchMockRecorder) RemoveConduit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveConduit", reflect.TypeOf((*MockTrench)(nil).RemoveConduit), arg0, arg1)
}
