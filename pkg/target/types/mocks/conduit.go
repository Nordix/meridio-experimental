// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/target/types/conduit.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/nordix/meridio/pkg/target/types"
)

// MockConduit is a mock of Conduit interface.
type MockConduit struct {
	ctrl     *gomock.Controller
	recorder *MockConduitMockRecorder
}

// MockConduitMockRecorder is the mock recorder for MockConduit.
type MockConduitMockRecorder struct {
	mock *MockConduit
}

// NewMockConduit creates a new mock instance.
func NewMockConduit(ctrl *gomock.Controller) *MockConduit {
	mock := &MockConduit{ctrl: ctrl}
	mock.recorder = &MockConduitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConduit) EXPECT() *MockConduitMockRecorder {
	return m.recorder
}

// AddStream mocks base method.
func (m *MockConduit) AddStream(arg0 context.Context, arg1 types.Stream) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddStream", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddStream indicates an expected call of AddStream.
func (mr *MockConduitMockRecorder) AddStream(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStream", reflect.TypeOf((*MockConduit)(nil).AddStream), arg0, arg1)
}

// Connect mocks base method.
func (m *MockConduit) Connect(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockConduitMockRecorder) Connect(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockConduit)(nil).Connect), ctx)
}

// Disconnect mocks base method.
func (m *MockConduit) Disconnect(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disconnect", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Disconnect indicates an expected call of Disconnect.
func (mr *MockConduitMockRecorder) Disconnect(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockConduit)(nil).Disconnect), ctx)
}

// GetIPs mocks base method.
func (m *MockConduit) GetIPs() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIPs")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetIPs indicates an expected call of GetIPs.
func (mr *MockConduitMockRecorder) GetIPs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIPs", reflect.TypeOf((*MockConduit)(nil).GetIPs))
}

// GetName mocks base method.
func (m *MockConduit) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockConduitMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockConduit)(nil).GetName))
}

// GetStream mocks base method.
func (m *MockConduit) GetStream(streamName string) types.Stream {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStream", streamName)
	ret0, _ := ret[0].(types.Stream)
	return ret0
}

// GetStream indicates an expected call of GetStream.
func (mr *MockConduitMockRecorder) GetStream(streamName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStream", reflect.TypeOf((*MockConduit)(nil).GetStream), streamName)
}

// GetStreams mocks base method.
func (m *MockConduit) GetStreams() []types.Stream {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStreams")
	ret0, _ := ret[0].([]types.Stream)
	return ret0
}

// GetStreams indicates an expected call of GetStreams.
func (mr *MockConduitMockRecorder) GetStreams() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStreams", reflect.TypeOf((*MockConduit)(nil).GetStreams))
}

// GetTrench mocks base method.
func (m *MockConduit) GetTrench() types.Trench {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrench")
	ret0, _ := ret[0].(types.Trench)
	return ret0
}

// GetTrench indicates an expected call of GetTrench.
func (mr *MockConduitMockRecorder) GetTrench() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrench", reflect.TypeOf((*MockConduit)(nil).GetTrench))
}

// RemoveStream mocks base method.
func (m *MockConduit) RemoveStream(arg0 context.Context, arg1 types.Stream) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveStream", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveStream indicates an expected call of RemoveStream.
func (mr *MockConduitMockRecorder) RemoveStream(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveStream", reflect.TypeOf((*MockConduit)(nil).RemoveStream), arg0, arg1)
}

// SetVIPs mocks base method.
func (m *MockConduit) SetVIPs(vips []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetVIPs", vips)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetVIPs indicates an expected call of SetVIPs.
func (mr *MockConduitMockRecorder) SetVIPs(vips interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVIPs", reflect.TypeOf((*MockConduit)(nil).SetVIPs), vips)
}
