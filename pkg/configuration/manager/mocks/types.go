// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/configuration/manager/types.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/nordix/meridio/api/nsp/v1"
)

// MockConfigurationRegistry is a mock of ConfigurationRegistry interface.
type MockConfigurationRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockConfigurationRegistryMockRecorder
}

// MockConfigurationRegistryMockRecorder is the mock recorder for MockConfigurationRegistry.
type MockConfigurationRegistryMockRecorder struct {
	mock *MockConfigurationRegistry
}

// NewMockConfigurationRegistry creates a new mock instance.
func NewMockConfigurationRegistry(ctrl *gomock.Controller) *MockConfigurationRegistry {
	mock := &MockConfigurationRegistry{ctrl: ctrl}
	mock.recorder = &MockConfigurationRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigurationRegistry) EXPECT() *MockConfigurationRegistryMockRecorder {
	return m.recorder
}

// GetAttractors mocks base method.
func (m *MockConfigurationRegistry) GetAttractors(arg0 *v1.Attractor) []*v1.Attractor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttractors", arg0)
	ret0, _ := ret[0].([]*v1.Attractor)
	return ret0
}

// GetAttractors indicates an expected call of GetAttractors.
func (mr *MockConfigurationRegistryMockRecorder) GetAttractors(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttractors", reflect.TypeOf((*MockConfigurationRegistry)(nil).GetAttractors), arg0)
}

// GetConduits mocks base method.
func (m *MockConfigurationRegistry) GetConduits(arg0 *v1.Conduit) []*v1.Conduit {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConduits", arg0)
	ret0, _ := ret[0].([]*v1.Conduit)
	return ret0
}

// GetConduits indicates an expected call of GetConduits.
func (mr *MockConfigurationRegistryMockRecorder) GetConduits(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConduits", reflect.TypeOf((*MockConfigurationRegistry)(nil).GetConduits), arg0)
}

// GetFlows mocks base method.
func (m *MockConfigurationRegistry) GetFlows(arg0 *v1.Flow) []*v1.Flow {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlows", arg0)
	ret0, _ := ret[0].([]*v1.Flow)
	return ret0
}

// GetFlows indicates an expected call of GetFlows.
func (mr *MockConfigurationRegistryMockRecorder) GetFlows(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlows", reflect.TypeOf((*MockConfigurationRegistry)(nil).GetFlows), arg0)
}

// GetGateways mocks base method.
func (m *MockConfigurationRegistry) GetGateways(arg0 *v1.Gateway) []*v1.Gateway {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGateways", arg0)
	ret0, _ := ret[0].([]*v1.Gateway)
	return ret0
}

// GetGateways indicates an expected call of GetGateways.
func (mr *MockConfigurationRegistryMockRecorder) GetGateways(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGateways", reflect.TypeOf((*MockConfigurationRegistry)(nil).GetGateways), arg0)
}

// GetStreams mocks base method.
func (m *MockConfigurationRegistry) GetStreams(arg0 *v1.Stream) []*v1.Stream {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStreams", arg0)
	ret0, _ := ret[0].([]*v1.Stream)
	return ret0
}

// GetStreams indicates an expected call of GetStreams.
func (mr *MockConfigurationRegistryMockRecorder) GetStreams(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStreams", reflect.TypeOf((*MockConfigurationRegistry)(nil).GetStreams), arg0)
}

// GetTrench mocks base method.
func (m *MockConfigurationRegistry) GetTrench(arg0 *v1.Trench) *v1.Trench {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrench", arg0)
	ret0, _ := ret[0].(*v1.Trench)
	return ret0
}

// GetTrench indicates an expected call of GetTrench.
func (mr *MockConfigurationRegistryMockRecorder) GetTrench(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrench", reflect.TypeOf((*MockConfigurationRegistry)(nil).GetTrench), arg0)
}

// GetVips mocks base method.
func (m *MockConfigurationRegistry) GetVips(arg0 *v1.Vip) []*v1.Vip {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVips", arg0)
	ret0, _ := ret[0].([]*v1.Vip)
	return ret0
}

// GetVips indicates an expected call of GetVips.
func (mr *MockConfigurationRegistryMockRecorder) GetVips(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVips", reflect.TypeOf((*MockConfigurationRegistry)(nil).GetVips), arg0)
}

// MockWatcherRegistry is a mock of WatcherRegistry interface.
type MockWatcherRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockWatcherRegistryMockRecorder
}

// MockWatcherRegistryMockRecorder is the mock recorder for MockWatcherRegistry.
type MockWatcherRegistryMockRecorder struct {
	mock *MockWatcherRegistry
}

// NewMockWatcherRegistry creates a new mock instance.
func NewMockWatcherRegistry(ctrl *gomock.Controller) *MockWatcherRegistry {
	mock := &MockWatcherRegistry{ctrl: ctrl}
	mock.recorder = &MockWatcherRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWatcherRegistry) EXPECT() *MockWatcherRegistryMockRecorder {
	return m.recorder
}

// RegisterWatcher mocks base method.
func (m *MockWatcherRegistry) RegisterWatcher(toWatch, ch interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterWatcher", toWatch, ch)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterWatcher indicates an expected call of RegisterWatcher.
func (mr *MockWatcherRegistryMockRecorder) RegisterWatcher(toWatch, ch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterWatcher", reflect.TypeOf((*MockWatcherRegistry)(nil).RegisterWatcher), toWatch, ch)
}

// UnregisterWatcher mocks base method.
func (m *MockWatcherRegistry) UnregisterWatcher(ch interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnregisterWatcher", ch)
}

// UnregisterWatcher indicates an expected call of UnregisterWatcher.
func (mr *MockWatcherRegistryMockRecorder) UnregisterWatcher(ch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterWatcher", reflect.TypeOf((*MockWatcherRegistry)(nil).UnregisterWatcher), ch)
}
