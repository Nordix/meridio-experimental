/*
Copyright (c) 2021 Nordix Foundation

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package target;
option go_package = "github.com/nordix/meridio/api/target";
import "google/protobuf/empty.proto";

service Ambassador {
    // Connect to a conduit, so a new interface will be created.
    // The Ambassador will also connect to the trench the 
    // conduit belongs to. And, the VIPs will be added to 
    // the loopback interface.
    rpc Connect(Conduit) returns (google.protobuf.Empty) {}
    // Disconnect from a conduit, so the interface will be removed.
    // The Ambassador will also close the streams which are opened
    // in the conduit. It will disconnect the target from the trench.
    // And, the VIPs will be removed from the loopback interface.
    rpc Disconnect(Conduit) returns (google.protobuf.Empty) {}
    // WatchConduits will, first, returns all conduits connected with
    // "Connect" as event status, and then, will send an event on each 
    // conduit connection/disconnection.
    rpc WatchConduits(google.protobuf.Empty) returns (stream ConduitEvent) {}

    // Request to a stream, so the identifier will be registered
    // in the NSP service, the LBs will start load-balancing the
    // traffic to the target.
    rpc Request(Stream) returns (google.protobuf.Empty) {}
    // Close a stream, so the identifier will be unregistered
    // in the NSP service, the LBs will stop load-balancing the
    // traffic to the target.
    rpc Close(Stream) returns (google.protobuf.Empty) {}
    // WatchStreams will, first, returns all streams opened with "Request"
    // as event status, and then, will send an event on each stream
    // request/close.
    rpc WatchStreams(google.protobuf.Empty) returns (stream StreamEvent) {}
}

message Trench {
    // Name of the trench
    string name = 1;
}

// The message contains the properties of a conduit
message Conduit {
    // Name of the service
    // The name will be compiled using the proxy and the trench name
    // e.g.: load-balancer with the proxy used in trench-a will 
    // become proxy.load-balancer.trench-a
    string networkServiceName = 1;
    // Trench the conduit belongs to
    Trench trench = 2;
}

message Stream {
    string Name = 1;
    // Conduit the stream belongs to
    Conduit conduit = 2;
}

enum ConduitEventStatus {
	Connect = 0;
	Disconnect = 1;
}

message ConduitEvent {
    Conduit conduit = 1;
    ConduitEventStatus conduitEventStatus = 2;
}

enum StreamEventStatus {
	Request = 0;
	Close = 1;
}

message StreamEvent {
    Stream stream = 1;
    StreamEventStatus streamEventStatus = 2;
}
